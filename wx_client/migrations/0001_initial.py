# Generated by Django 3.0.4 on 2020-03-22 16:08

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='FeatureForSignIn',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('face_token', models.CharField(max_length=256, unique=True, verbose_name='人脸特征密文')),
                ('blue_tooth_mac', models.CharField(max_length=64, verbose_name='蓝牙Mac地址')),
                ('record_time', models.DateTimeField(auto_now_add=True, verbose_name='记录时间')),
            ],
            options={
                'verbose_name': 'user feature',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('u_uuid', models.UUIDField(db_index=True, unique=True)),
                ('gender', models.IntegerField(choices=[(0, '男性'), (1, '女性'), (2, '未知')], default=2, verbose_name='性别')),
                ('birthday', models.DateField(default=None, verbose_name='出生年月')),
                ('nick_name', models.CharField(max_length=32, verbose_name='微信昵称')),
                ('tel', models.CharField(default='', max_length=11, verbose_name='联系电话')),
                ('register_time', models.DateTimeField(auto_now=True)),
                ('email', models.EmailField(max_length=254, verbose_name='邮箱地址')),
                ('university', models.CharField(default='', max_length=32, verbose_name='毕业院校')),
                ('rss_method', models.CharField(choices=[('email', '邮箱'), ('', '未开启RSS')], default='', max_length=32, verbose_name='消息订阅方式')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
